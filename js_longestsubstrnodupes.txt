/**
 * @param {string} s
 * @return {number}
 */
var lengthOfLongestSubstring = function(s) {
    if (s.length === 0 || s.length === 1) {
        return s.length;
    }
    
    var longest = 1;
    
    var m = new Map();    
    var start = 0;
    var end = 0;    
    while (end < s.length) {
        // is current char dupe in current window?
        var index = m.get(s[end]);
        if (m.has(s[end]) && index >= start) {
            // found a dupe in current window
            // update longest and reset start
            //console.log(`longest=${longest} start=${start} end=${end}`);
            longest = Math.max(longest, end-start);
            start = index+1;            
        }
        // update char index in map
        // and increment end
        m.set(s[end], end++); 
    }  
    
    // did longest end on last char?
    longest = Math.max(longest, end-start);
    
    return longest;
};