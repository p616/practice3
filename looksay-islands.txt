#include <iostream>
#include <vector>

bool isValid(vector<vector<int>>& img, int x, int y)
{
    return ((x >=0) && (y >= 0) && (x < img.size()) && (y < img[0].size()));
}

void paintFill(vector<vector<int>>& img, int x, int y)
{
    if (img.size() == 0 || img[0].size() == 0)
    {
        return;
    }
    
    // exit recursion
    if (!isValid(img,x,y))
    {
        return;
    }
    
    if (img[x][y] == 1)
    {
        //done
        return;
    }
    
    img[x][y] = 1;
    
    paintFill(img, x+1, y);
    paintFill(img, x-1, y);
    paintFill(img, x, y+1);
    paintFill(img, x, y-1);
}

string getNextString(const string& s)
{
    string currentString;
    
    int count = 0;
    char currentChar = '\0
    for (char c : s)
    {
        if (currentChar == '\0')
        {
            currentChar = c;
            count = 1;
        }
        else
        {
            if (currentChar == c)
            {
                count++;
            }
            else
            {
                currentString += to_string(count);
                currentString += to_string(currentChar);
                currentChar = c;
                count = 1;
            }
        }
    }
    
    s += to_string(count);
    s += to_string(currentChar);
    
    return currentString;
}

vector<string> looksay(string s, int n)
{
    vector<string> ret;
    
    if (s.size() == 0)
    {
        return ret;
    }
    
    string currenString = s;
    ret.push_back(currentString);
    
    for (int i=0; i<(n-1); ++i)
    {
        currentString = getNext(currentString);
        ret.push_back(currentString);
    }
    
    return ret;
}

int main() 
{
    string s = "1";
    vector<string> v = looksay(s,6);
    return 0;
}

/*
// To run unit test, you can use Catch2 framework in the following way:
#define CATCH_CONFIG_MAIN
#include "catch.hpp"
#include <iostream>

int solution() {
    std::cout << "You can use stdout to debug" << std::endl;
    return 0;
}

// You can write test cases here (Catch2 framework)
TEST_CASE("Run the solution") {
    REQUIRE( solution() == 0 );
}

// Remember to delete/comment any main() methods in the file,
// as they would have a conflict with the test framework.
*/